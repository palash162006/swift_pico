// generated from rosidl_adapter/resource/msg.idl.em
// with input from mav_msgs/msg/RollPitchYawrateThrust.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Vector3.idl"
#include "std_msgs/msg/Header.idl"

module mav_msgs {
  module msg {
    struct RollPitchYawrateThrust {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "We use the coordinate frames with the following convention:" "\n"
        "  x: forward" "\n"
        "  y: left" "\n"
        "  z: up" "\n"
        "rotation convention (z-y'-x''):" "\n"
        "yaw rotates around fixed frame's z axis" "\n"
        "pitch rotates around new y-axis (y')" "\n"
        "roll rotates around new x-axis (x'')" "\n"
        "This is a convenience-message to support that low-level (microcontroller-based) state" "\n"
        "estimators may not have knowledge about the absolute yaw." "\n"
        "Roll- and pitch-angle should be specified in the header/frame_id frame" "\n"
        "Roll angle")
      @unit (value="rad")
      double roll;

      @verbatim (language="comment", text=
        "Pitch angle")
      @unit (value="rad")
      double pitch;

      @verbatim (language="comment", text=
        "Yaw rate around z-axis")
      @unit (value="rad/s")
      double yaw_rate;

      @verbatim (language="comment", text=
        "Thrust expressed in the body frame." "\n"
        "For a fixed-wing, usually the x-component is used." "\n"
        "For a multi-rotor, usually the z-component is used." "\n"
        "Set all un-used components to 0.")
      @unit (value="N")
      geometry_msgs::msg::Vector3 thrust;
    };
  };
};
